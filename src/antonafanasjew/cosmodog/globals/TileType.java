package antonafanasjew.cosmodog.globals;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;

import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
import com.google.common.collect.Lists;

/**
 * Contains tile types with the corresponding tile and layer ids. 
 * Note: Tile ids are related to the offset that is used in the application. They do not match the id's in the Pyxel tool.
 * To calculate a real id from the Pyxel tool id: Take the pyxel tool id and add 1.
 * 
 * Note: These tile types do not represent the tiles in the tile sheet, but rather their semantics in the context of the map.
 * Example: The brown marker tile with the id x can be included multiple times in the tile type enumeration, f.i. on layer enemies as ENEMY_TANK
 * and on layer effects as EFFECT_BIRDS.
 * 
 * Hence, a tile type cannot be identified by a tile id. To identify the tile type, both tile id and the layer id are needed.
 * 
 * To represent an unknown tile type, the type UNKNONW can be used.
 *
 * 
 */
public enum TileType {

	DECONTAMINATION_SPOT(Layers.LAYER_GEAR, 1399),

	STONE_IN_WATER_ROUND(Layers.LAYER_WATER_OBJECTS_PASSABLE, 687),
	STONE_IN_WATER_SHARP(Layers.LAYER_WATER_OBJECTS_PASSABLE, 690),

	CLIFF_WESTERN_EDGE(Layers.LAYER_CLIFFS, 954),
	CLIFF_SOUTHERN_EDGE(Layers.LAYER_CLIFFS, 953),
	CLIFF_EASTERN_EDGE(Layers.LAYER_CLIFFS, 952),
	CLIFF_WESTERN_CORNER(Layers.LAYER_CLIFFS, 961),
	CLIFF_EASTERN_CORNER(Layers.LAYER_CLIFFS, 963),

	STRUTS_IN_WATER(Layers.LAYER_RUINS, 1082),
	STRUTS_IN_WATER_RIGHT(Layers.LAYER_RUINS, 1084),
	STRUTS_IN_WATER_LEFT(Layers.LAYER_RUINS, 1088),

	FAN_ON_A_WALL(Layers.LAYER_RUINS, 1047),
	FAN_ON_A_ROOF(Layers.LAYER_TOWERS_TOP, 4059),

	GRASS_OBJECT_FLOWER(Layers.LAYER_GRASS_OBJECTS_PASSABLE, 688),
	TRAFFIC_LIGHT(Layers.LAYER_ROADS_OBJECTS_MANUAL, 1613),

	ALIEN_COMPUTER(Layers.LAYER_RUINS_OBJECTS_RANDOM, 4226),
	ALIEN_COMPUTER_TOP(Layers.LAYER_RUINS_TOP, 4217),

	LAVA_CENTER(Layers.LAYER_LAVA, 478),
	LAVA_BORDER_W(Layers.LAYER_LAVA, 479),
	LAVA_BORDER_NW(Layers.LAYER_LAVA, 480),
	LAVA_BORDER_N(Layers.LAYER_LAVA, 481),
	LAVA_BORDER_NE(Layers.LAYER_LAVA, 482),
	LAVA_BORDER_E(Layers.LAYER_LAVA, 483),
	LAVA_BORDER_SE(Layers.LAYER_LAVA, 484),
	LAVA_BORDER_S(Layers.LAYER_LAVA, 485),
	LAVA_BORDER_SW(Layers.LAYER_LAVA, 486),

	LAVA_BORDER_S_AND_E(Layers.LAYER_LAVA, 487),
	LAVA_BORDER_S_AND_W(Layers.LAYER_LAVA, 489),
	LAVA_BORDER_N_AND_W(Layers.LAYER_LAVA, 495),
	LAVA_BORDER_N_AND_E(Layers.LAYER_LAVA, 493),

	LAVA_RIVER_VERT(Layers.LAYER_LAVA, 497),
	LAVA_RIVER_HOR(Layers.LAYER_LAVA, 501),
	LAVA_RIVER_W_AND_S(Layers.LAYER_LAVA, 498),
	LAVA_RIVER_N_AND_E(Layers.LAYER_LAVA, 502),
	LAVA_RIVER_E_AND_S(Layers.LAYER_LAVA, 496),
	LAVA_RIVER_N_AND_W(Layers.LAYER_LAVA, 504),

	LAVA_RIVER_N_S_E(Layers.LAYER_LAVA, 508),
	LAVA_RIVER_N_S_W(Layers.LAYER_LAVA, 510),
	LAVA_RIVER_W_E_N(Layers.LAYER_LAVA, 512),
	LAVA_RIVER_W_E_S(Layers.LAYER_LAVA, 506),
	LAVA_RIVER_W_E_N_S(Layers.LAYER_LAVA, 500),

	LAVA_RIVER_PATCH(Layers.LAYER_LAVA, 509),
	LAVA_RIVER_DELTA_N(Layers.LAYER_LAVA, 515),
	LAVA_RIVER_DELTA_S(Layers.LAYER_LAVA, 521),
	LAVA_RIVER_DELTA_W(Layers.LAYER_LAVA, 517),
	LAVA_RIVER_DELTA_E(Layers.LAYER_LAVA, 519),
	LAVA_RIVER_BRIDGE_VERT(Layers.LAYER_LAVA, 514),
	LAVA_RIVER_BRIDGE_HOR(Layers.LAYER_LAVA, 516),


	WATER_CENTER(Layers.LAYER_WATER, 55),
	WATER_BORDER_W(Layers.LAYER_WATER, 56),
	WATER_BORDER_NW(Layers.LAYER_WATER, 57),
	WATER_BORDER_N(Layers.LAYER_WATER, 58),
	WATER_BORDER_NE(Layers.LAYER_WATER, 59),
	WATER_BORDER_E(Layers.LAYER_WATER, 60),
	WATER_BORDER_SE(Layers.LAYER_WATER, 61),
	WATER_BORDER_S(Layers.LAYER_WATER, 62),
	WATER_BORDER_SW(Layers.LAYER_WATER, 63),
	
	WATER_BORDER_S_AND_E(Layers.LAYER_WATER, 66),
	WATER_BORDER_S_AND_W(Layers.LAYER_WATER, 68),
	WATER_BORDER_N_AND_W(Layers.LAYER_WATER, 70),
	WATER_BORDER_N_AND_E(Layers.LAYER_WATER, 72),
	
	RIVER_VERT(Layers.LAYER_WATER, 76),
	RIVER_HOR(Layers.LAYER_WATER, 78),
	RIVER_W_AND_S(Layers.LAYER_WATER, 77),
	RIVER_N_AND_E(Layers.LAYER_WATER, 81),
	RIVER_E_AND_S(Layers.LAYER_WATER, 75),
	RIVER_N_AND_W(Layers.LAYER_WATER, 79),
	RIVER_N_S_E(Layers.LAYER_WATER, 83),
	RIVER_N_S_W(Layers.LAYER_WATER, 87),
	RIVER_W_E_N(Layers.LAYER_WATER, 89),
	RIVER_W_E_S(Layers.LAYER_WATER, 85),
	RIVER_W_E_N_S(Layers.LAYER_WATER, 73),
	RIVER_PATCH(Layers.LAYER_WATER, 82),
	RIVER_DELTA_N(Layers.LAYER_WATER, 98),
	RIVER_DELTA_S(Layers.LAYER_WATER, 94),
	RIVER_DELTA_W(Layers.LAYER_WATER, 96),
	RIVER_DELTA_E(Layers.LAYER_WATER, 92),
	RIVER_BRIDGE_VERT(Layers.LAYER_WATER, 93),
	RIVER_BRIDGE_HOR(Layers.LAYER_WATER, 95),
	
	
	REV_RIVER_VERT(Layers.LAYER_WATER, 2002),
	REV_RIVER_HOR(Layers.LAYER_WATER, 2004),
	REV_RIVER_W_AND_S(Layers.LAYER_WATER, 2003),
	REV_RIVER_N_AND_E(Layers.LAYER_WATER, 2007),
	REV_RIVER_E_AND_S(Layers.LAYER_WATER, 2001),
	REV_RIVER_N_AND_W(Layers.LAYER_WATER, 2005),
	REV_RIVER_N_S_E(Layers.LAYER_WATER, 2009),
	REV_RIVER_N_S_W(Layers.LAYER_WATER, 2013),
	REV_RIVER_W_E_N(Layers.LAYER_WATER, 2015),
	REV_RIVER_W_E_S(Layers.LAYER_WATER, 2011),
	REV_RIVER_W_E_N_S(Layers.LAYER_WATER, 1999),
	REV_RIVER_PATCH(Layers.LAYER_WATER, 2008),
	REV_RIVER_DELTA_N(Layers.LAYER_WATER, 2024),
	REV_RIVER_DELTA_S(Layers.LAYER_WATER, 2020),
	REV_RIVER_DELTA_W(Layers.LAYER_WATER, 2022),
	REV_RIVER_DELTA_E(Layers.LAYER_WATER, 2018),
	REV_RIVER_BRIDGE_VERT(Layers.LAYER_WATER, 2019),
	REV_RIVER_BRIDGE_HOR(Layers.LAYER_WATER, 2021),

	/*
	These tiles are used in a separate layer defining the general functioning
	of a portal gun. The gun emits a ray that can be used to teleport.
	This ray can be emitted only in specific areas, defined by the tile type
	PORTAL_RAY_EMITTABLE. It is ended when it reaches a tile with the type PORTAL_RAY_BLOCKING.
	When the ray reaches a tile with the type PORTAL_RAY_ATTACHABLE, it can be attached to it,
	creating a portal.
	Note: The assumption is that all PORTAL_RAY_EMITTABLE tiles are always completely enwrapped in
	tiles of the type PORTAL_RAY_BLOCKING and PORTAL_RAY_ATTACHABLE since the ray will go
	through the whole map otherwise.
	Note: There are other ways to block a portal ray: Crates, Reflectors, closed hatches etc.
	Since they are dynamic pieces, they will not be considered in this layer.
	 */
	PORTAL_RAY_EMITTABLE(Layers.LAYER_META_PORTALS, 31),
	PORTAL_RAY_BLOCKING(Layers.LAYER_META_PORTALS, 28),
	PORTAL_RAY_ATTACHABLE(Layers.LAYER_META_PORTALS, 30),
	
	FIRE_EFFECT(Layers.LAYER_META_EFFECTS, 28),
	SMOKE_EFFECT(Layers.LAYER_META_EFFECTS, 35),
	BIRDS_EFFECT(Layers.LAYER_META_EFFECTS, 36),
	ELECTRICITY_EFFECT(Layers.LAYER_META_EFFECTS, 33),
	TELEPORT_EFFECT(Layers.LAYER_META_EFFECTS, 30),
	
	
	WATERPLACE(Layers.LAYER_META_WATERPLACES, 30),
	NEAR_WATERPLACE(Layers.LAYER_META_WATERPLACES, 29),
	


	SUPPLIES(Layers.LAYER_META_COLLECTIBLES,newCounter(TilesetConstants.FIRST_ID_META_COLLECTIBLES_TILESET)),
	FIRSTAIDKIT(Layers.LAYER_META_COLLECTIBLES,counter()),
	MEDIPACK(Layers.LAYER_META_COLLECTIBLES,counter()),


	INFOBIT(Layers.LAYER_META_COLLECTIBLES, newCounter(TilesetConstants.FIRST_ID_META_COLLECTIBLES_TILESET + 1 * 9)),
	INFOBYTE(Layers.LAYER_META_COLLECTIBLES, counter()),
	INFOBANK(Layers.LAYER_META_COLLECTIBLES,counter()),

	INSIGHT(Layers.LAYER_META_COLLECTIBLES, newCounter(TilesetConstants.FIRST_ID_META_COLLECTIBLES_TILESET + 18)),
	COGNITION(Layers.LAYER_META_COLLECTIBLES, counter()),

	SOFTWARE(Layers.LAYER_META_COLLECTIBLES, newCounter(TilesetConstants.FIRST_ID_META_COLLECTIBLES_TILESET + 27)),
	CHART(Layers.LAYER_META_COLLECTIBLES, counter()),

	SOULESSENCE(Layers.LAYER_META_COLLECTIBLES, newCounter(TilesetConstants.FIRST_ID_META_COLLECTIBLES_TILESET + 36)),
	BOTTLE(Layers.LAYER_META_COLLECTIBLES,counter()),
	FOOD_COMPARTMENT(Layers.LAYER_META_COLLECTIBLES,counter()),
	ARMOR(Layers.LAYER_META_COLLECTIBLES, counter()),
	FUEL_TANK(Layers.LAYER_META_COLLECTIBLES, counter()),

	FUEL(Layers.LAYER_META_COLLECTIBLES, newCounter(TilesetConstants.FIRST_ID_META_COLLECTIBLES_TILESET + 45)),

	BOAT(Layers.LAYER_META_COLLECTIBLES, newCounter(TilesetConstants.FIRST_ID_META_COLLECTIBLES_TILESET + 63)),
	DYNAMITE(Layers.LAYER_META_COLLECTIBLES,counter()),
	GEIGERZAEHLER(Layers.LAYER_META_COLLECTIBLES, counter()),
	SUPPLYTRACKER(Layers.LAYER_META_COLLECTIBLES,counter()),
	BINOCULARS(Layers.LAYER_META_COLLECTIBLES, counter()),
	JACKET(Layers.LAYER_META_COLLECTIBLES, counter()),
	ANTIDOTE(Layers.LAYER_META_COLLECTIBLES, counter()),
	MINEDETECTOR(Layers.LAYER_META_COLLECTIBLES,counter()),
	SKI(Layers.LAYER_META_COLLECTIBLES, counter()),
	PICK(Layers.LAYER_META_COLLECTIBLES,counter()),
	AXE(Layers.LAYER_META_COLLECTIBLES,counter()),
	MACHETE(Layers.LAYER_META_COLLECTIBLES, counter()),
	ARCHEOLOGISTS_JOURNAL(Layers.LAYER_META_COLLECTIBLES, counter()),
	WEAPON_FIRMWARE_UPGRADE(Layers.LAYER_META_COLLECTIBLES,counter()),
	NUTRIENTS(Layers.LAYER_META_COLLECTIBLES, counter()),
	PORTALGUN(Layers.LAYER_META_COLLECTIBLES, counter()),
	NIGHTVISION(Layers.LAYER_META_COLLECTIBLES, counter()),
	MOTIONTRACKER(Layers.LAYER_META_COLLECTIBLES, counter()),


	LOG_CARD_SERIES_0(Layers.LAYER_META_COLLECTIBLES,newCounter(TilesetConstants.FIRST_ID_META_COLLECTIBLES_TILESET + 9 * 12)),
	LOG_CARD_SERIES_1(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_SERIES_2(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_SERIES_3(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_SERIES_4(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_SERIES_5(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_SERIES_6(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_SERIES_7(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_SERIES_8(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_SERIES_9(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_SERIES_10(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_SERIES_11(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_SERIES_12(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_SERIES_13(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_SERIES_14(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_SERIES_15(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_SERIES_16(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_SERIES_17(Layers.LAYER_META_COLLECTIBLES,counter()),

	LOG_CARD_0(Layers.LAYER_META_COLLECTIBLES, newCounter(TilesetConstants.FIRST_ID_META_COLLECTIBLES_TILESET + 9 * 18)),
	LOG_CARD_1(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_2(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_3(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_4(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_5(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_6(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_7(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_8(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_9(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_10(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_11(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_12(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_13(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_14(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_15(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_16(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_17(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_18(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_19(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_20(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_21(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_22(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_23(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_24(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_25(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_26(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_27(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_28(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_29(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_30(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_31(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_32(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_33(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_34(Layers.LAYER_META_COLLECTIBLES,counter()),
	LOG_CARD_35(Layers.LAYER_META_COLLECTIBLES,counter()),


	VEHICLE(Layers.LAYER_META_COLLECTIBLES, newCounter(TilesetConstants.FIRST_ID_META_COLLECTIBLES_TILESET + 9 * 26)),
	PLATFORM(Layers.LAYER_META_COLLECTIBLES, newCounter(TilesetConstants.FIRST_ID_META_COLLECTIBLES_TILESET + 9 * 27)),


	RED_ALIEN_KEYCARD(Layers.LAYER_META_COLLECTIBLES, newCounter(TilesetConstants.FIRST_ID_META_COLLECTIBLES_TILESET + 9 * 32)),
	LILA_ALIEN_KEYCARD(Layers.LAYER_META_COLLECTIBLES,counter()),
	BLUE_ALIEN_KEYCARD(Layers.LAYER_META_COLLECTIBLES,counter()),
	CYAN_ALIEN_KEYCARD(Layers.LAYER_META_COLLECTIBLES,counter()),
	GREEN_ALIEN_KEYCARD(Layers.LAYER_META_COLLECTIBLES,counter()),
	YELLOW_ALIEN_KEYCARD(Layers.LAYER_META_COLLECTIBLES,counter()),
	BROWN_ALIEN_KEYCARD(Layers.LAYER_META_COLLECTIBLES,counter()),
	PURPLE_ALIEN_KEYCARD(Layers.LAYER_META_COLLECTIBLES,counter()),
	DARKBLUE_ALIEN_KEYCARD(Layers.LAYER_META_COLLECTIBLES,counter()),
	WHITE_ALIEN_KEYCARD(Layers.LAYER_META_COLLECTIBLES,counter()),


	WEAPONS_PISTOL(Layers.LAYER_META_COLLECTIBLES, newCounter(TilesetConstants.FIRST_ID_META_COLLECTIBLES_TILESET + 9 * 38)),
	WEAPONS_SHOTGUN(Layers.LAYER_META_COLLECTIBLES, counter()),
	WEAPONS_RIFLE(Layers.LAYER_META_COLLECTIBLES, counter()),
	WEAPONS_MACHINEGUN(Layers.LAYER_META_COLLECTIBLES, counter()),
	WEAPONS_ROCKETLAUNCHER(Layers.LAYER_META_COLLECTIBLES, counter()),

	AMMO_PISTOL(Layers.LAYER_META_COLLECTIBLES, newCounter(TilesetConstants.FIRST_ID_META_COLLECTIBLES_TILESET + 9 * 43)),
	AMMO_SHOTGUN(Layers.LAYER_META_COLLECTIBLES, counter()),
	AMMO_RIFLE(Layers.LAYER_META_COLLECTIBLES, counter()),
	AMMO_MACHINEGUN(Layers.LAYER_META_COLLECTIBLES, counter()),
	AMMO_ROCKETLAUNCHER(Layers.LAYER_META_COLLECTIBLES, counter()),



	RACE_TIME_BONUS_1(Layers.LAYER_META_COLLECTIBLES, 100),
	RACE_TIME_BONUS_2(Layers.LAYER_META_COLLECTIBLES, 101),
	RACE_TIME_BONUS_3(Layers.LAYER_META_COLLECTIBLES, 102),
	RACE_TIME_BONUS_4(Layers.LAYER_META_COLLECTIBLES, 103),
	RACE_TIME_BONUS_5(Layers.LAYER_META_COLLECTIBLES, 104),
	RACE_TIME_BONUS_6(Layers.LAYER_META_COLLECTIBLES, 105),
	RACE_TIME_BONUS_7(Layers.LAYER_META_COLLECTIBLES, 106),
	RACE_TIME_BONUS_8(Layers.LAYER_META_COLLECTIBLES, 107),
	RACE_TIME_BONUS_9(Layers.LAYER_META_COLLECTIBLES, 108),
	RACE_TIME_BONUS_10(Layers.LAYER_META_COLLECTIBLES, 109),
	RACE_TIME_BONUS_20(Layers.LAYER_META_COLLECTIBLES, 110),
	RACE_TIME_BONUS_30(Layers.LAYER_META_COLLECTIBLES, 111),
	RACE_TIME_BONUS_40(Layers.LAYER_META_COLLECTIBLES, 112),
	RACE_TIME_BONUS_50(Layers.LAYER_META_COLLECTIBLES, 113),

	RACE_RESETTER(Layers.LAYER_META_COLLECTIBLES, 118),


	TERRAIN_TYPE_OBSTACLE(Layers.LAYER_META_TERRAINTYPES, 28),
	TERRAIN_TYPE_WATER(Layers.LAYER_META_TERRAINTYPES, 33),
	TERRAIN_TYPE_ROAD(Layers.LAYER_META_TERRAINTYPES, 35),
	TERRAIN_TYPE_PLAIN(Layers.LAYER_META_TERRAINTYPES, 30),
	TERRAIN_TYPE_UNEVEN(Layers.LAYER_META_TERRAINTYPES, 29),
	TERRAIN_TYPE_ROUGH(Layers.LAYER_META_TERRAINTYPES, 34),
	TERRAIN_TYPE_BROKEN(Layers.LAYER_META_TERRAINTYPES, 36),
	
	GROUND_TYPE_PLANTS(Layers.LAYER_META_GROUNDTYPES, 29),
	GROUND_TYPE_SNOW(Layers.LAYER_META_GROUNDTYPES, 33),
	GROUND_TYPE_GRASS(Layers.LAYER_META_GROUNDTYPES, 10),
	GROUND_TYPE_SAND(Layers.LAYER_META_GROUNDTYPES, 208),
	GROUND_TYPE_SWAMP(Layers.LAYER_META_GROUNDTYPES, 172),
	
	
	COLLISION(Layers.LAYER_META_COLLISIONS, 28),
	COLLISION_VEHICLE(Layers.LAYER_META_COLLISIONS, 29),
	COLLISION_FREE(Layers.LAYER_META_COLLISIONS, 30),
	COLLISION_SNOW(Layers.LAYER_META_COLLISIONS, 32),
	COLLISION_WATER(Layers.LAYER_META_COLLISIONS, 33),
	
	//FLOWERS(-1000, 1504),
	//HIGHGRASS(-1000, 1576),
	
	
	
	META_TEMPERATURE_COLD(Layers.LAYER_META_TEMPERATURE, 33),
	
	ENERGYWALL_EFFECT_1(Layers.LAYER_META_EFFECTS, 2332),
	ENERGYWALL_EFFECT_2(Layers.LAYER_META_EFFECTS, 2333),
	ENERGYWALL_EFFECT_3(Layers.LAYER_META_EFFECTS, 2334),
	ENERGYWALL_EFFECT_4(Layers.LAYER_META_EFFECTS, 2335),
	ENERGYWALL_EFFECT_5(Layers.LAYER_META_EFFECTS, 2336),
	ENERGYWALL_EFFECT_6(Layers.LAYER_META_EFFECTS, 2337),
	ENERGYWALL_EFFECT_7(Layers.LAYER_META_EFFECTS, 2338),
	ENERGYWALL_EFFECT_8(Layers.LAYER_META_EFFECTS, 2339),
	ENERGYWALL_EFFECT_9(Layers.LAYER_META_EFFECTS, 2340),
	ENERGYWALL_EFFECT_10(Layers.LAYER_META_EFFECTS, 2341),
	ENERGYWALL_EFFECT_11(Layers.LAYER_META_EFFECTS, 2342),
	ENERGYWALL_EFFECT_12(Layers.LAYER_META_EFFECTS, 2343),
	ENERGYWALL_EFFECT_13(Layers.LAYER_META_EFFECTS, 2344),
	ENERGYWALL_EFFECT_14(Layers.LAYER_META_EFFECTS, 2345),
	ENERGYWALL_EFFECT_15(Layers.LAYER_META_EFFECTS, 2346),
	ENERGYWALL_EFFECT_16(Layers.LAYER_META_EFFECTS, 2347),
	ENERGYWALL_EFFECT_17(Layers.LAYER_META_EFFECTS, 2348),
	ENERGYWALL_EFFECT_18(Layers.LAYER_META_EFFECTS, 2349),
	
	ENERGY_WALL_GENERATOR(Layers.LAYER_ROADS_OBJECTS_MANUAL, 2350),
	
	
	RADIATION(Layers.LAYER_META_RADIATION, 29),
	RADIATION_SAFE_ZONE(Layers.LAYER_META_RADIATION, 30),
	ELECTRICITY(Layers.LAYER_META_RADIATION, 32),
	
	FREE_PLATFORM_PASSAGE(Layers.LAYER_META_PLATFORM_COLLISION, 30),
	
	
	DYNAMIC_PIECE_STONE(Layers.LAYER_META_DYNAMIC_PIECES, newCounter(TilesetConstants.FIRST_ID_META_DYNAMIC_PIECES_TILESET + 1 * 9)),
	DYNAMIC_PIECE_HARDSTONE(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_TREE(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_BAMBOO(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_CRUMBLED_WALL_MONTAIN(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_CRUMBLED_WALL_ALIEN_BASE(Layers.LAYER_META_DYNAMIC_PIECES, counter()),

	DYNAMIC_PIECE_CRATE(Layers.LAYER_META_DYNAMIC_PIECES, newCounter(TilesetConstants.FIRST_ID_META_DYNAMIC_PIECES_TILESET + 2 * 9)),
	DYNAMIC_PIECE_ALIENCRATE(Layers.LAYER_META_DYNAMIC_PIECES, counter()),

	DYNAMIC_PIECE_MINE(Layers.LAYER_META_DYNAMIC_PIECES, newCounter(TilesetConstants.FIRST_ID_META_DYNAMIC_PIECES_TILESET + 3 * 9)),
	DYNAMIC_PIECE_POISON(Layers.LAYER_META_DYNAMIC_PIECES, counter()),

	DYNAMIC_PIECE_ONE_WAY_BOLLARD_WEST(Layers.LAYER_META_DYNAMIC_PIECES, newCounter(TilesetConstants.FIRST_ID_META_DYNAMIC_PIECES_TILESET + 4 * 9)),
	DYNAMIC_PIECE_ONE_WAY_BOLLARD_NORTH(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_ONE_WAY_BOLLARD_EAST(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_ONE_WAY_BOLLARD_SOUTH(Layers.LAYER_META_DYNAMIC_PIECES, counter()),


	DYNAMIC_PIECE_TRAFFIC_BARRIER_VERTICAL_FIRST(Layers.LAYER_META_DYNAMIC_PIECES, newCounter(TilesetConstants.FIRST_ID_META_DYNAMIC_PIECES_TILESET + 5 * 9)),
	DYNAMIC_PIECE_TRAFFIC_BARRIER_VERTICAL_LAST(Layers.LAYER_META_DYNAMIC_PIECES, newCounter(TilesetConstants.FIRST_ID_META_DYNAMIC_PIECES_TILESET + 7 * 9 - 1)),
	DYNAMIC_PIECE_TRAFFIC_BARRIER_HORIZONTAL_FIRST(Layers.LAYER_META_DYNAMIC_PIECES, newCounter(TilesetConstants.FIRST_ID_META_DYNAMIC_PIECES_TILESET + 7 * 9)),
	DYNAMIC_PIECE_TRAFFIC_BARRIER_HORIZONTAL_LAST(Layers.LAYER_META_DYNAMIC_PIECES, newCounter(TilesetConstants.FIRST_ID_META_DYNAMIC_PIECES_TILESET + 9 * 9 - 1)),


	DYNAMIC_PIECE_PRESSUREBUTTON(Layers.LAYER_META_DYNAMIC_PIECES, newCounter(TilesetConstants.FIRST_ID_META_DYNAMIC_PIECES_TILESET + 10 * 9)),
	DYNAMIC_PIECE_SWITCH(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_JAMMER(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_JAMMER_INVISIBLE(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_SENSOR(Layers.LAYER_META_DYNAMIC_PIECES, counter()),

	DYNAMIC_PIECE_LETTERPLATE_1(Layers.LAYER_META_DYNAMIC_PIECES, newCounter(TilesetConstants.FIRST_ID_META_DYNAMIC_PIECES_TILESET + 11 * 9)),
	DYNAMIC_PIECE_LETTERPLATE_2(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_LETTERPLATE_3(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_LETTERPLATE_4(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_LETTERPLATE_5(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_LETTERPLATE_6(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_LETTERPLATE_7(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_LETTERPLATE_8(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_LETTERPLATE_9(Layers.LAYER_META_DYNAMIC_PIECES, counter()),

	DYNAMIC_PIECE_RACE_POLE_POSITION_HORIZONTAL(Layers.LAYER_META_DYNAMIC_PIECES, newCounter(TilesetConstants.FIRST_ID_META_DYNAMIC_PIECES_TILESET + 12 * 9)),
	DYNAMIC_PIECE_RACE_POLE_POSITION_VERTICAL(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_RACE_FINISH_LINE_HORIZONTAL(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_RACE_FINISH_LINE_VERTICAL(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_RACE_EXIT(Layers.LAYER_META_DYNAMIC_PIECES, counter()),


	DYNAMIC_PIECE_TIME_BONUS_1(Layers.LAYER_META_DYNAMIC_PIECES, newCounter(TilesetConstants.FIRST_ID_META_DYNAMIC_PIECES_TILESET + 13 * 9)),
	DYNAMIC_PIECE_TIME_BONUS_2(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_TIME_BONUS_3(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_TIME_BONUS_4(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_TIME_BONUS_5(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_TIME_BONUS_6(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_TIME_BONUS_7(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_TIME_BONUS_8(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_TIME_BONUS_9(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_TIME_BONUS_10(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_TIME_BONUS_20(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_TIME_BONUS_30(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_TIME_BONUS_40(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_TIME_BONUS_50(Layers.LAYER_META_DYNAMIC_PIECES, counter()),

	DYNAMIC_PIECE_RESETTER(Layers.LAYER_META_DYNAMIC_PIECES, newCounter(TilesetConstants.FIRST_ID_META_DYNAMIC_PIECES_TILESET + 15 * 9)),


	DYNAMIC_PIECE_MOVEABLE_BLOCK(Layers.LAYER_META_DYNAMIC_PIECES, newCounter(TilesetConstants.FIRST_ID_META_DYNAMIC_PIECES_TILESET + 17 * 9)),
	DYNAMIC_PIECE_MOVEABLE_CONTAINER(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_MOVEABLE_ICE(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_MOVEABLE_PLANT(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_CUBE(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_TRANSPARENT_CUBE(Layers.LAYER_META_DYNAMIC_PIECES, counter()),


	DYNAMIC_PIECE_SECRET_DOOR_SPIKES(Layers.LAYER_META_DYNAMIC_PIECES, newCounter(TilesetConstants.FIRST_ID_META_DYNAMIC_PIECES_TILESET + 19 * 9)),
	DYNAMIC_PIECE_SECRET_DOOR_HYDRAULICS(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_SECRET_DOOR_ENERGY(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_SECRET_DOOR_WALL(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_GATE(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_BOLLARD_RISEN(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_BOLLARD_SUNK(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_AUTOBOLLARD(Layers.LAYER_META_DYNAMIC_PIECES, counter()),


	DYNAMIC_PIECE_MIN_ALIEN_DOOR(Layers.LAYER_META_DYNAMIC_PIECES, newCounter(TilesetConstants.FIRST_ID_META_DYNAMIC_PIECES_TILESET + 21 * 9)),
	DYNAMIC_PIECE_MAX_ALIEN_DOOR(Layers.LAYER_META_DYNAMIC_PIECES, newCounter(TilesetConstants.FIRST_ID_META_DYNAMIC_PIECES_TILESET + 25 * 9 - 1)),


	DYNAMIC_PIECE_ALIEN_BASE_BLOCKADE(Layers.LAYER_META_DYNAMIC_PIECES, newCounter(TilesetConstants.FIRST_ID_META_DYNAMIC_PIECES_TILESET + 25 * 9)),


	DYNAMIC_PIECE_BINARY_INDICATOR_ALIEN_BASE(Layers.LAYER_META_DYNAMIC_PIECES, newCounter(TilesetConstants.FIRST_ID_META_DYNAMIC_PIECES_TILESET + 27 * 9)),
	DYNAMIC_PIECE_GUIDETERMINAL(Layers.LAYER_META_DYNAMIC_PIECES, newCounter(TilesetConstants.FIRST_ID_META_DYNAMIC_PIECES_TILESET + 28 * 9)),
	

	DYNAMIC_PIECE_REFLECTOR_NW(Layers.LAYER_META_DYNAMIC_PIECES, newCounter(TilesetConstants.FIRST_ID_META_DYNAMIC_PIECES_TILESET + 29 * 9)),
	DYNAMIC_PIECE_REFLECTOR_NE(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_REFLECTOR_SE(Layers.LAYER_META_DYNAMIC_PIECES, counter()),
	DYNAMIC_PIECE_REFLECTOR_SW(Layers.LAYER_META_DYNAMIC_PIECES, counter()),


	META_ENEMY_TILE_ROBOT(Layers.LAYER_META_NPC, newCounter(TilesetConstants.FIRST_ID_META_NPC_TILESET + 0 * 9)),
	META_ENEMY_TILE_SCOUT(Layers.LAYER_META_NPC, counter()),
	META_ENEMY_TILE_LIGHTTANK(Layers.LAYER_META_NPC, counter()),
	META_ENEMY_TILE_SOLARTANK(Layers.LAYER_META_NPC, counter()),
	META_ENEMY_TILE_DRONE(Layers.LAYER_META_NPC, counter()),
	META_ENEMY_TILE_TURRET(Layers.LAYER_META_NPC, counter()),
	META_ENEMY_TILE_ARTILLERY(Layers.LAYER_META_NPC, counter()),
	META_ENEMY_TILE_PIGRAT(Layers.LAYER_META_NPC, counter()),


	META_ENEMY_TILE_FLOATER(Layers.LAYER_META_NPC, newCounter(TilesetConstants.FIRST_ID_META_NPC_TILESET + 2 * 9)),
	META_ENEMY_TILE_CONDUCTOR(Layers.LAYER_META_NPC, counter()),
	META_ENEMY_TILE_GUARDIAN(Layers.LAYER_META_NPC, counter()),




	//Doors have different variants, so they are not stored here.
	
	//This is a dummy tile type to represent a tile that is not in the tile type enum.
	//It can be used to be returned when searching tile types by tile id in case the id does not match any type.
	UNKNOWN(-1, -1),
	
	NO_RADIATION_MARKUP(Layers.LAYER_META_RADIATION, 0);
	
	static class LayerAndTile {
		
		public int layerId;
		public int tileId;
		
		public static LayerAndTile fromIds(int layerId, int tileId) {
			LayerAndTile retVal = new LayerAndTile();
			retVal.layerId = layerId;
			retVal.tileId = tileId;
			return retVal;
		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + layerId;
			result = prime * result + tileId;
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			LayerAndTile other = (LayerAndTile) obj;
			if (layerId != other.layerId)
				return false;
			if (tileId != other.tileId)
				return false;
			return true;
		}
		
	}
	
	private static final TileType[] VALUES = TileType.values();
	
	public static final List<TileType> WEAPONS_TILES = Lists.newArrayList();
	
	static {
		WEAPONS_TILES.add(WEAPONS_PISTOL);
		WEAPONS_TILES.add(WEAPONS_SHOTGUN);
		WEAPONS_TILES.add(WEAPONS_RIFLE);
		WEAPONS_TILES.add(WEAPONS_MACHINEGUN);
		WEAPONS_TILES.add(WEAPONS_ROCKETLAUNCHER);
	}
	
	public static final List<TileType> AMMO_TILES = Lists.newArrayList();
	
	static {
		AMMO_TILES.add(AMMO_PISTOL);
		AMMO_TILES.add(AMMO_SHOTGUN);
		AMMO_TILES.add(AMMO_RIFLE);
		AMMO_TILES.add(AMMO_MACHINEGUN);
		AMMO_TILES.add(AMMO_ROCKETLAUNCHER);
	}
	
	public static final List<TileType> ENERGY_WALL_TILES = Lists.newArrayList();
	
	static {
		ENERGY_WALL_TILES.add(ENERGYWALL_EFFECT_1);
		ENERGY_WALL_TILES.add(ENERGYWALL_EFFECT_2);
		ENERGY_WALL_TILES.add(ENERGYWALL_EFFECT_3);
		ENERGY_WALL_TILES.add(ENERGYWALL_EFFECT_4);
		ENERGY_WALL_TILES.add(ENERGYWALL_EFFECT_5);
		ENERGY_WALL_TILES.add(ENERGYWALL_EFFECT_6);
		ENERGY_WALL_TILES.add(ENERGYWALL_EFFECT_7);
		ENERGY_WALL_TILES.add(ENERGYWALL_EFFECT_8);
		ENERGY_WALL_TILES.add(ENERGYWALL_EFFECT_9);
		ENERGY_WALL_TILES.add(ENERGYWALL_EFFECT_10);
		ENERGY_WALL_TILES.add(ENERGYWALL_EFFECT_11);
		ENERGY_WALL_TILES.add(ENERGYWALL_EFFECT_12);
		ENERGY_WALL_TILES.add(ENERGYWALL_EFFECT_13);
		ENERGY_WALL_TILES.add(ENERGYWALL_EFFECT_14);
		ENERGY_WALL_TILES.add(ENERGYWALL_EFFECT_15);
		ENERGY_WALL_TILES.add(ENERGYWALL_EFFECT_16);
		ENERGY_WALL_TILES.add(ENERGYWALL_EFFECT_17);
		ENERGY_WALL_TILES.add(ENERGYWALL_EFFECT_18);
	}

	//Here, the key is the offset from the first traffic barrier tile and the value is the rhythm
	//in which the barrier opens and closes.
	public static final Map<Integer, int[]> TRAFFIC_BARRIER_TILE_OFFSETS_TO_OPENNESS_RHYTHMS = new HashMap<>();
	static {

		TRAFFIC_BARRIER_TILE_OFFSETS_TO_OPENNESS_RHYTHMS.put(0, new int[]{1, 1});
		TRAFFIC_BARRIER_TILE_OFFSETS_TO_OPENNESS_RHYTHMS.put(1, new int[]{2, 2});
		TRAFFIC_BARRIER_TILE_OFFSETS_TO_OPENNESS_RHYTHMS.put(2, new int[]{3, 3});
		TRAFFIC_BARRIER_TILE_OFFSETS_TO_OPENNESS_RHYTHMS.put(3, new int[]{4, 4});
		TRAFFIC_BARRIER_TILE_OFFSETS_TO_OPENNESS_RHYTHMS.put(4, new int[]{5, 5});
		TRAFFIC_BARRIER_TILE_OFFSETS_TO_OPENNESS_RHYTHMS.put(5, new int[]{6, 6});
		TRAFFIC_BARRIER_TILE_OFFSETS_TO_OPENNESS_RHYTHMS.put(6, new int[]{7, 7});
		TRAFFIC_BARRIER_TILE_OFFSETS_TO_OPENNESS_RHYTHMS.put(7, new int[]{8, 8});
		TRAFFIC_BARRIER_TILE_OFFSETS_TO_OPENNESS_RHYTHMS.put(8, new int[]{8, 4});

		TRAFFIC_BARRIER_TILE_OFFSETS_TO_OPENNESS_RHYTHMS.put(9, new int[]{1, 2});
		TRAFFIC_BARRIER_TILE_OFFSETS_TO_OPENNESS_RHYTHMS.put(10, new int[]{1, 3});
		TRAFFIC_BARRIER_TILE_OFFSETS_TO_OPENNESS_RHYTHMS.put(11, new int[]{1, 4});
		TRAFFIC_BARRIER_TILE_OFFSETS_TO_OPENNESS_RHYTHMS.put(12, new int[]{1, 5});
		TRAFFIC_BARRIER_TILE_OFFSETS_TO_OPENNESS_RHYTHMS.put(13, new int[]{2, 4});
		TRAFFIC_BARRIER_TILE_OFFSETS_TO_OPENNESS_RHYTHMS.put(14, new int[]{3, 6});
		TRAFFIC_BARRIER_TILE_OFFSETS_TO_OPENNESS_RHYTHMS.put(15, new int[]{4, 8});
		TRAFFIC_BARRIER_TILE_OFFSETS_TO_OPENNESS_RHYTHMS.put(16, new int[]{2, 5});
		TRAFFIC_BARRIER_TILE_OFFSETS_TO_OPENNESS_RHYTHMS.put(17, new int[]{2, 8});
	}
	
	private static int COUNTER = 0;

	private static int newCounter(int counter) {
		COUNTER = counter;
		return counter();
	}

	private static int counter() {
		return COUNTER++;
	}

	private int layerId;
	private int tileId;
	
	
	private TileType(int layerId, int tileId) {
		this.layerId = layerId;
		this.tileId = tileId;
	}
	
	/**
	 * Returns the tile id.
	 * @return Tile id.
	 */
	public int getTileId() {
		return tileId;
	}
	
	/**
	 * Returns the layer id.
	 * @return Layer id.
	 */
	public int getLayerId() {
		return layerId;
	}
	
	private static Cache<LayerAndTile, TileType> tileTypePerLayerAndTileIdCache = CacheBuilder.newBuilder().build();
	
	/**
	 * Returns the tile type for given layer id and the tile id.
	 * @param layerId Layer id.
	 * @param tileId Tile id.
	 * @return The tile type for given ids or UNKNOWN if nothing matches.
	 */
	public static TileType getByLayerAndTileId(int layerId, int tileId) {
		
		LayerAndTile layerAndTile = LayerAndTile.fromIds(layerId, tileId);
		
		try {
			TileType tileType = tileTypePerLayerAndTileIdCache.get(layerAndTile, new Callable<TileType>() {
	
				@Override
				public TileType call() {
						for (TileType tileType : VALUES) {
							if (tileType.getLayerId() == layerId && tileType.getTileId() == tileId) {
								return tileType;
							}
						}
						return TileType.UNKNOWN;
				}
				
			});
			return tileType;
		} catch (ExecutionException e) {
			throw new RuntimeException(e);
		}
		
	}
	
}
